def admin_auth():
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False

    if not st.session_state.authenticated:
        password = st.text_input("Enter admin password:", type="password")
        if password == "your_admin_password":  # Replace with your admin password
            st.session_state.authenticated = True
            st.success("Authentication successful!")
        elif password:
            st.error("Incorrect password.")

# Function to display the admin interface
def admin_interface():
    st.header("üîí Admin Interface")

    # Load templates
    load_templates()

    # Template Management
    st.subheader("Manage Templates")

    # Add a new template
    with st.expander("‚ûï Add New Template"):
        template_name = st.text_input("Template Name")
        template_content = st.text_area("Template Content (use {subject} and {input} as placeholders)")
        category = st.text_input("Category")  # Add category input
        if st.button("Add Template"):
            if template_name and template_content and category:
                # Validate that placeholders exist
                if "{subject}" in template_content and "{input}" in template_content:
                    st.session_state.templates[template_name] = {
                        "content": template_content,
                        "category": category
                    }
                    save_templates()
                    st.success(f"Template '{template_name}' added.")
                else:
                    st.error("Template content must include both {subject} and {input} placeholders.")
            else:
                st.error("Please provide a template name, content, and category.")

    # Edit existing templates
    if st.session_state.templates:
        with st.expander("‚úèÔ∏è Edit Existing Templates"):
            selected_template = st.selectbox("Select a template to edit", list(st.session_state.templates.keys()))
            new_name = st.text_input("New Template Name", value=selected_template)
            new_content = st.text_area("New Template Content", value=st.session_state.templates[selected_template]["content"])
            new_category = st.text_input("New Category", value=st.session_state.templates[selected_template]["category"])
            if st.button("Update Template"):
                if new_name and new_content and new_category:
                    if "{subject}" in new_content and "{input}" in new_content:
                        del st.session_state.templates[selected_template]
                        st.session_state.templates[new_name] = {
                            "content": new_content,
                            "category": new_category
                        }
                        save_templates()
                        st.success(f"Template '{new_name}' updated.")
                    else:
                        st.error("Template content must include both {subject} and {input} placeholders.")
                else:
                    st.error("Please provide a new name, content, and category.")

    # Delete templates
    if st.session_state.templates:
        with st.expander("üóëÔ∏è Delete Templates"):
            templates_to_delete = st.multiselect("Select templates to delete", list(st.session_state.templates.keys()))
            if st.button("Delete Selected Templates"):
                if templates_to_delete:
                    for tmpl in templates_to_delete:
                        del st.session_state.templates[tmpl]
                    save_templates()
                    st.success("Selected templates have been deleted.")
                else:
                    st.error("No templates selected for deletion.")

# Function to generate prompt text
def call_openrouter_api(prompt):
    logging.info("Sending prompt to OpenRouter API.")
    try:
        response = requests.post(
            url="https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            },
            data=json.dumps({
                "model": "openai/gpt-3.5-turbo",
                "messages": [
                    {"role": "user", "content": prompt}
                ]
            }),
            timeout=30  # Set a timeout of 30 seconds
        )

        if response.status_code == 200:
            response_data = response.json()
            prompt_text = response_data.get('choices', [{}])[0].get('message', {}).get('content', "").strip()
            logging.info("Received prompt text from OpenRouter API.")
            return prompt_text
        else:
            # Log the error and return error message
            logging.warning(f"API Error {response.status_code}: {response.text}")
            return f"Error: {response.status_code}, {response.text}"
    except requests.exceptions.Timeout:
        st.error("The request to the API timed out. Please try again later.")
        return "Request Timed Out"
    except Exception as e:
        # Handle unexpected exceptions
        logging.error(f"Exception occurred while generating prompt text: {e}")
        return f"Exception occurred: {e}"
